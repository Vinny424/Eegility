{"version":3,"file":"AdhdAnalysis-C17U7rzG.js","sources":["../../node_modules/@chakra-ui/icons/dist/esm/Repeat.mjs","../../src/pages/AdhdAnalysis.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst RepeatIcon = createIcon({\n  displayName: \"RepeatIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M10.319,4.936a7.239,7.239,0,0,1,7.1,2.252,1.25,1.25,0,1,0,1.872-1.657A9.737,9.737,0,0,0,9.743,2.5,10.269,10.269,0,0,0,2.378,9.61a.249.249,0,0,1-.271.178l-1.033-.13A.491.491,0,0,0,.6,9.877a.5.5,0,0,0-.019.526l2.476,4.342a.5.5,0,0,0,.373.248.43.43,0,0,0,.062,0,.5.5,0,0,0,.359-.152l3.477-3.593a.5.5,0,0,0-.3-.844L5.15,10.172a.25.25,0,0,1-.2-.333A7.7,7.7,0,0,1,10.319,4.936Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.406,14.1a.5.5,0,0,0,.015-.526l-2.5-4.329A.5.5,0,0,0,20.546,9a.489.489,0,0,0-.421.151l-3.456,3.614a.5.5,0,0,0,.3.842l1.848.221a.249.249,0,0,1,.183.117.253.253,0,0,1,.023.216,7.688,7.688,0,0,1-5.369,4.9,7.243,7.243,0,0,1-7.1-2.253,1.25,1.25,0,1,0-1.872,1.656,9.74,9.74,0,0,0,9.549,3.03,10.261,10.261,0,0,0,7.369-7.12.251.251,0,0,1,.27-.179l1.058.127a.422.422,0,0,0,.06,0A.5.5,0,0,0,23.406,14.1Z\" })\n  ] })\n});\n\nexport { RepeatIcon };\n","import { useState, useEffect } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport {\n  Box,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Progress,\n  Card,\n  CardBody,\n  CardHeader,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  StatArrow,\n  StatGroup,\n  Badge,\n  Divider\n} from '@chakra-ui/react'\nimport { ArrowBackIcon, RepeatIcon } from '@chakra-ui/icons'\n\ninterface AnalysisResult {\n  id: string\n  eegId: string\n  prediction: 'ADHD' | 'Non-ADHD'\n  confidence: number\n  features: {\n    thetaBetaRatio: number\n    deltaActivity: number\n    alphaActivity: number\n    betaActivity: number\n    thetaActivity: number\n  }\n  processingTime: number\n  completedAt: string\n  status: 'running' | 'completed' | 'failed'\n}\n\nconst AdhdAnalysis: React.FC = () => {\n  const { id } = useParams<{ id: string }>()\n  const navigate = useNavigate()\n  \n  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isRunning, setIsRunning] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    // Simulate fetching existing analysis or starting new one\n    const fetchAnalysis = async () => {\n      if (!id) return\n\n      try {\n        setIsLoading(true)\n        \n        // Simulate API call delay\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        \n        // Check if analysis already exists\n        const existingAnalysis = localStorage.getItem(`analysis_${id}`)\n        \n        if (existingAnalysis) {\n          setAnalysis(JSON.parse(existingAnalysis))\n        } else {\n          // Start new analysis\n          startAnalysis()\n        }\n      } catch (err: any) {\n        setError(err.message || 'Failed to load analysis')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchAnalysis()\n  }, [id])\n\n  const startAnalysis = async () => {\n    setIsRunning(true)\n    setProgress(0)\n    setError(null)\n\n    try {\n      // Simulate analysis progress\n      const progressInterval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 95) {\n            clearInterval(progressInterval)\n            return 95\n          }\n          return prev + Math.random() * 15\n        })\n      }, 500)\n\n      // Simulate analysis completion after 5 seconds\n      await new Promise(resolve => setTimeout(resolve, 5000))\n      \n      clearInterval(progressInterval)\n      setProgress(100)\n\n      // Generate mock analysis result\n      const mockResult: AnalysisResult = {\n        id: `analysis_${Date.now()}`,\n        eegId: id!,\n        prediction: Math.random() > 0.5 ? 'ADHD' : 'Non-ADHD',\n        confidence: Math.round((0.7 + Math.random() * 0.25) * 100) / 100,\n        features: {\n          thetaBetaRatio: Math.round((2 + Math.random() * 3) * 100) / 100,\n          deltaActivity: Math.round((15 + Math.random() * 10) * 100) / 100,\n          alphaActivity: Math.round((25 + Math.random() * 15) * 100) / 100,\n          betaActivity: Math.round((20 + Math.random() * 10) * 100) / 100,\n          thetaActivity: Math.round((30 + Math.random() * 15) * 100) / 100\n        },\n        processingTime: 4.7,\n        completedAt: new Date().toISOString(),\n        status: 'completed'\n      }\n\n      setAnalysis(mockResult)\n      localStorage.setItem(`analysis_${id}`, JSON.stringify(mockResult))\n      \n    } catch (err: any) {\n      setError(err.message || 'Analysis failed')\n    } finally {\n      setIsRunning(false)\n    }\n  }\n\n  const handleRunNewAnalysis = () => {\n    localStorage.removeItem(`analysis_${id}`)\n    setAnalysis(null)\n    startAnalysis()\n  }\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minH=\"400px\">\n        <VStack spacing={4}>\n          <Spinner size=\"xl\" color=\"brand.500\" thickness=\"4px\" />\n          <Text>Loading analysis...</Text>\n        </VStack>\n      </Box>\n    )\n  }\n\n  if (error) {\n    return (\n      <VStack spacing={4}>\n        <Alert status=\"error\">\n          <AlertIcon />\n          {error}\n        </Alert>\n        <Button onClick={() => window.location.reload()}>\n          Try Again\n        </Button>\n      </VStack>\n    )\n  }\n\n  return (\n    <VStack spacing={6} align=\"stretch\">\n      {/* Header */}\n      <HStack justify=\"space-between\" align=\"center\">\n        <HStack spacing={4}>\n          <Button\n            leftIcon={<ArrowBackIcon />}\n            variant=\"ghost\"\n            onClick={() => navigate(`/eeg/${id}`)}\n          >\n            Back to EEG Details\n          </Button>\n          <Heading size=\"lg\">ADHD Analysis</Heading>\n        </HStack>\n\n        {analysis && (\n          <Button\n            leftIcon={<RepeatIcon />}\n            colorScheme=\"brand\"\n            variant=\"outline\"\n            onClick={handleRunNewAnalysis}\n            isDisabled={isRunning}\n          >\n            Run New Analysis\n          </Button>\n        )}\n      </HStack>\n\n      {/* Analysis Progress */}\n      {isRunning && (\n        <Card>\n          <CardBody>\n            <VStack spacing={4}>\n              <Text fontSize=\"lg\" fontWeight=\"semibold\">\n                Running ADHD Classification Analysis...\n              </Text>\n              <Progress\n                value={progress}\n                size=\"lg\"\n                colorScheme=\"brand\"\n                width=\"100%\"\n                borderRadius=\"md\"\n              />\n              <Text fontSize=\"sm\" color=\"gray.600\">\n                {progress < 30 && \"Preprocessing EEG signals...\"}\n                {progress >= 30 && progress < 60 && \"Extracting frequency domain features...\"}\n                {progress >= 60 && progress < 90 && \"Running machine learning classification...\"}\n                {progress >= 90 && \"Finalizing results...\"}\n              </Text>\n            </VStack>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Analysis Results */}\n      {analysis && analysis.status === 'completed' && (\n        <>\n          {/* Main Result */}\n          <Card>\n            <CardHeader>\n              <Heading size=\"md\">Classification Result</Heading>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={4}>\n                <HStack spacing={4} align=\"center\">\n                  <Badge\n                    colorScheme={analysis.prediction === 'ADHD' ? 'red' : 'green'}\n                    fontSize=\"xl\"\n                    p={3}\n                    borderRadius=\"md\"\n                  >\n                    {analysis.prediction}\n                  </Badge>\n                  <VStack align=\"start\" spacing={1}>\n                    <Text fontSize=\"lg\" fontWeight=\"semibold\">\n                      Confidence: {(analysis.confidence * 100).toFixed(1)}%\n                    </Text>\n                    <Text fontSize=\"sm\" color=\"gray.600\">\n                      Processing Time: {analysis.processingTime}s\n                    </Text>\n                  </VStack>\n                </HStack>\n\n                <Divider />\n\n                <Box width=\"100%\">\n                  <Text mb={3} fontWeight=\"semibold\">\n                    Interpretation:\n                  </Text>\n                  <Text fontSize=\"sm\" color=\"gray.700\">\n                    {analysis.prediction === 'ADHD' \n                      ? \"The analysis indicates patterns consistent with ADHD characteristics in the EEG signal. This includes elevated theta/beta ratio and altered frequency power distributions.\"\n                      : \"The analysis indicates patterns consistent with typical EEG activity. The frequency distributions and theta/beta ratio are within normal ranges.\"\n                    }\n                  </Text>\n                </Box>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          {/* Feature Analysis */}\n          <Card>\n            <CardHeader>\n              <Heading size=\"md\">EEG Feature Analysis</Heading>\n            </CardHeader>\n            <CardBody>\n              <StatGroup>\n                <Stat>\n                  <StatLabel>Theta/Beta Ratio</StatLabel>\n                  <StatNumber>{analysis.features.thetaBetaRatio}</StatNumber>\n                  <StatHelpText>\n                    <StatArrow type={analysis.features.thetaBetaRatio > 4 ? 'increase' : 'decrease'} />\n                    {analysis.features.thetaBetaRatio > 4 ? 'Elevated' : 'Normal'}\n                  </StatHelpText>\n                </Stat>\n\n                <Stat>\n                  <StatLabel>Delta Activity</StatLabel>\n                  <StatNumber>{analysis.features.deltaActivity}%</StatNumber>\n                  <StatHelpText>1-4 Hz</StatHelpText>\n                </Stat>\n\n                <Stat>\n                  <StatLabel>Theta Activity</StatLabel>\n                  <StatNumber>{analysis.features.thetaActivity}%</StatNumber>\n                  <StatHelpText>4-8 Hz</StatHelpText>\n                </Stat>\n\n                <Stat>\n                  <StatLabel>Alpha Activity</StatLabel>\n                  <StatNumber>{analysis.features.alphaActivity}%</StatNumber>\n                  <StatHelpText>8-12 Hz</StatHelpText>\n                </Stat>\n\n                <Stat>\n                  <StatLabel>Beta Activity</StatLabel>\n                  <StatNumber>{analysis.features.betaActivity}%</StatNumber>\n                  <StatHelpText>12-30 Hz</StatHelpText>\n                </Stat>\n              </StatGroup>\n            </CardBody>\n          </Card>\n\n          {/* Clinical Notes */}\n          <Card>\n            <CardHeader>\n              <Heading size=\"md\">Clinical Notes</Heading>\n            </CardHeader>\n            <CardBody>\n              <Alert status=\"info\">\n                <AlertIcon />\n                <VStack align=\"start\" spacing={2}>\n                  <Text fontWeight=\"semibold\">\n                    Important: This analysis is for research purposes only\n                  </Text>\n                  <Text fontSize=\"sm\">\n                    This automated analysis should not be used as the sole basis for clinical diagnosis. \n                    ADHD diagnosis requires comprehensive clinical evaluation by qualified healthcare professionals, \n                    including behavioral assessments, medical history, and multiple diagnostic criteria.\n                  </Text>\n                </VStack>\n              </Alert>\n            </CardBody>\n          </Card>\n        </>\n      )}\n\n      {/* Start Analysis Button */}\n      {!analysis && !isRunning && (\n        <Card>\n          <CardBody textAlign=\"center\">\n            <VStack spacing={4}>\n              <Text fontSize=\"lg\">\n                Ready to run ADHD classification analysis on this EEG recording\n              </Text>\n              <Button\n                colorScheme=\"brand\"\n                size=\"lg\"\n                onClick={startAnalysis}\n              >\n                Start Analysis\n              </Button>\n            </VStack>\n          </CardBody>\n        </Card>\n      )}\n    </VStack>\n  )\n}\n\nexport default AdhdAnalysis"],"names":["RepeatIcon","createIcon","jsxs","jsx","AdhdAnalysis","id","useParams","navigate","useNavigate","analysis","setAnalysis","useState","isLoading","setIsLoading","isRunning","setIsRunning","progress","setProgress","error","setError","useEffect","resolve","existingAnalysis","startAnalysis","err","progressInterval","prev","mockResult","handleRunNewAnalysis","Box","VStack","Spinner","Text","Alert","AlertIcon","Button","HStack","ArrowBackIcon","Heading","Card","CardBody","Progress","Fragment","CardHeader","Badge","Divider","StatGroup","Stat","StatLabel","StatNumber","StatHelpText","StatArrow"],"mappings":"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","x_google_ignoreList":[0]}