{"version":3,"file":"useEegData-COs0Ft8g.js","sources":["../../src/store/eegDataStore.ts","../../src/types/index.ts","../../src/services/eegDataService.ts","../../src/hooks/useEegData.ts"],"sourcesContent":["import { create } from 'zustand'\nimport type { EegData, SearchParams, LoadingState } from '@/types'\n\ninterface EegDataState {\n  eegDataList: EegData[]\n  selectedEegData: EegData | null\n  searchParams: SearchParams\n  loadingState: LoadingState\n  pagination: {\n    currentPage: number\n    pageSize: number\n    totalItems: number\n    totalPages: number\n  }\n  uploadProgress: {\n    [fileId: string]: number\n  }\n}\n\ninterface EegDataActions {\n  setEegDataList: (data: EegData[]) => void\n  addEegData: (data: EegData) => void\n  updateEegData: (id: string, data: Partial<EegData>) => void\n  removeEegData: (id: string) => void\n  setSelectedEegData: (data: EegData | null) => void\n  setSearchParams: (params: Partial<SearchParams>) => void\n  setLoadingState: (state: Partial<LoadingState>) => void\n  setPagination: (pagination: Partial<EegDataState['pagination']>) => void\n  setUploadProgress: (fileId: string, progress: number) => void\n  clearUploadProgress: (fileId: string) => void\n  clearAll: () => void\n}\n\ntype EegDataStore = EegDataState & EegDataActions\n\nconst initialState: EegDataState = {\n  eegDataList: [],\n  selectedEegData: null,\n  searchParams: {},\n  loadingState: {\n    isLoading: false,\n    error: undefined,\n  },\n  pagination: {\n    currentPage: 1,\n    pageSize: 10,\n    totalItems: 0,\n    totalPages: 0,\n  },\n  uploadProgress: {},\n}\n\nexport const useEegDataStore = create<EegDataStore>((set, get) => ({\n  ...initialState,\n\n  setEegDataList: (data: EegData[]) => {\n    set({ eegDataList: data })\n  },\n\n  addEegData: (data: EegData) => {\n    const { eegDataList } = get()\n    set({ eegDataList: [data, ...eegDataList] })\n  },\n\n  updateEegData: (id: string, data: Partial<EegData>) => {\n    const { eegDataList } = get()\n    const updatedList = eegDataList.map((item) =>\n      item.id === id ? { ...item, ...data } : item\n    )\n    set({ eegDataList: updatedList })\n\n    // Update selected data if it matches\n    const { selectedEegData } = get()\n    if (selectedEegData && selectedEegData.id === id) {\n      set({ selectedEegData: { ...selectedEegData, ...data } })\n    }\n  },\n\n  removeEegData: (id: string) => {\n    const { eegDataList, selectedEegData } = get()\n    const filteredList = eegDataList.filter((item) => item.id !== id)\n    set({ eegDataList: filteredList })\n\n    // Clear selected data if it was removed\n    if (selectedEegData && selectedEegData.id === id) {\n      set({ selectedEegData: null })\n    }\n  },\n\n  setSelectedEegData: (data: EegData | null) => {\n    set({ selectedEegData: data })\n  },\n\n  setSearchParams: (params: Partial<SearchParams>) => {\n    const { searchParams } = get()\n    set({ searchParams: { ...searchParams, ...params } })\n  },\n\n  setLoadingState: (state: Partial<LoadingState>) => {\n    const { loadingState } = get()\n    set({ loadingState: { ...loadingState, ...state } })\n  },\n\n  setPagination: (pagination: Partial<EegDataState['pagination']>) => {\n    const currentPagination = get().pagination\n    set({ pagination: { ...currentPagination, ...pagination } })\n  },\n\n  setUploadProgress: (fileId: string, progress: number) => {\n    const { uploadProgress } = get()\n    set({\n      uploadProgress: {\n        ...uploadProgress,\n        [fileId]: progress,\n      },\n    })\n  },\n\n  clearUploadProgress: (fileId: string) => {\n    const { uploadProgress } = get()\n    const { [fileId]: removed, ...rest } = uploadProgress\n    set({ uploadProgress: rest })\n  },\n\n  clearAll: () => {\n    set(initialState)\n  },\n}))","// API Response Types\nexport interface ApiResponse<T = any> {\n  data?: T\n  message?: string\n  error?: string\n  success: boolean\n}\n\n// User Types\nexport interface User {\n  id: string\n  email: string\n  firstName: string\n  lastName: string\n  role: string\n  institution: string\n  department: string\n  phone: string\n  createdAt: string\n  lastLoginAt?: string\n  isActive: boolean\n  organization?: string\n  title?: string\n  avatar?: string\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface RegisterRequest {\n  email: string\n  password: string\n  firstName: string\n  lastName: string\n  institution?: string\n  department?: string\n  phone?: string\n}\n\nexport interface LoginResponse {\n  token: string\n  refreshToken: string\n  expiresAt: string\n  user: User\n}\n\nexport interface ChangePasswordRequest {\n  currentPassword: string\n  newPassword: string\n}\n\n// EEG Data Types\nexport interface EegData {\n  id: string\n  filename: string\n  originalFilename: string\n  format: EegFormat\n  size: number\n  uploadDate: string\n  metadata: EegMetadata\n  bidsCompliant: boolean\n  tags: string[]\n  notes: string\n  adhdAnalysis?: AdhdAnalysis\n  dataUrl?: string\n}\n\nexport enum EegFormat {\n  Edf = 'Edf',\n  Bdf = 'Bdf',\n  Vhdr = 'Vhdr',\n  Set = 'Set',\n  Fif = 'Fif',\n  Cnt = 'Cnt',\n  Npy = 'Npy'\n}\n\nexport interface EegMetadata {\n  subject: SubjectMetadata\n  session: string\n  task: string\n  acquisition: string\n  channels: number\n  sampleRate: number\n  duration: number\n  customFields: Record<string, any>\n}\n\nexport interface SubjectMetadata {\n  id: string\n  age?: number\n  gender: string\n  group: string\n  handedness: string\n  medications: string[]\n  diagnosis: string\n}\n\nexport interface EegUploadRequest {\n  file: File\n  notes?: string\n  tags?: string[]\n  subjectId: string\n  subjectAge?: number\n  subjectGender?: string\n  subjectGroup?: string\n  session?: string\n  task?: string\n  acquisition?: string\n}\n\n// ADHD Analysis Types\nexport interface AdhdAnalysis {\n  requested: boolean\n  performed: boolean\n  inProgress: boolean\n  result: string\n  confidence: number\n  performedAt?: string\n  error?: string\n  details?: AdhdAnalysisDetails\n}\n\nexport interface AdhdAnalysisDetails {\n  probabilities: Record<string, number>\n  featuresUsed: string[]\n  keyFeatures: KeyFeatures\n  modelVersion: string\n}\n\nexport interface KeyFeatures {\n  thetaBetaRatio?: number\n  frontalTheta?: number\n  centralBeta?: number\n  alphaActivity?: number\n  additionalFeatures: Record<string, number>\n}\n\nexport interface AdhdAnalysisRequest {\n  eegDataId: string\n}\n\n// BIDS Types\nexport interface BidsMetadata {\n  subject: string\n  session: string\n  task: string\n  acquisition: string\n  run: string\n  recording: string\n  participants: Record<string, any>\n  taskMetadata: Record<string, any>\n}\n\n// UI State Types\nexport interface LoadingState {\n  isLoading: boolean\n  error?: string\n}\n\nexport interface PaginationParams {\n  page: number\n  pageSize: number\n}\n\nexport interface SearchParams {\n  searchTerm?: string\n  tags?: string[]\n  format?: EegFormat\n}\n\n// Theme Types\nexport interface ThemeColors {\n  primary: string\n  secondary: string\n  accent: string\n  background: string\n  surface: string\n  text: string\n  textSecondary: string\n  success: string\n  warning: string\n  error: string\n}\n\n// Navigation Types\nexport interface NavigationItem {\n  label: string\n  path: string\n  icon: string\n  requiresAuth?: boolean\n  adminOnly?: boolean\n}\n\n// Form Types\nexport interface FormErrors {\n  [key: string]: string | undefined\n}\n\n// File Upload Types\nexport interface FileUploadProgress {\n  progress: number\n  status: 'idle' | 'uploading' | 'success' | 'error'\n  error?: string\n}\n\n// Device Integration Types\nexport interface DeviceConfig {\n  type: 'hospital' | 'openbci-mk3' | 'openbci-mk4'\n  name: string\n  settings: Record<string, any>\n  isConnected: boolean\n}\n\nexport interface StreamingData {\n  timestamp: number\n  channels: number[]\n  sampleRate: number\n}\n\n// Analytics Types\nexport interface AnalyticsData {\n  totalUploads: number\n  totalUsers: number\n  adhdAnalysisCount: number\n  storageUsed: number\n  recentActivity: ActivityLog[]\n}\n\nexport interface ActivityLog {\n  id: string\n  userId: string\n  action: string\n  timestamp: string\n  details: Record<string, any>\n}","import api, { handleApiResponse, handleApiError, createFileUploadApi } from './api'\nimport type { \n  EegData, \n  EegUploadRequest, \n  AdhdAnalysis, \n  AdhdAnalysisRequest,\n  SearchParams,\n  PaginationParams\n} from '@/types'\nimport { EegFormat } from '@/types'\n\nexport const eegDataService = {\n  // Upload EEG data file\n  uploadEegData: async (\n    uploadData: EegUploadRequest,\n    onProgress?: (progress: number) => void\n  ): Promise<EegData> => {\n    try {\n      const uploadApi = createFileUploadApi()\n      const formData = new FormData()\n      \n      formData.append('file', uploadData.file)\n      formData.append('subjectId', uploadData.subjectId)\n      \n      if (uploadData.notes) formData.append('notes', uploadData.notes)\n      if (uploadData.subjectAge) formData.append('subjectAge', uploadData.subjectAge.toString())\n      if (uploadData.subjectGender) formData.append('subjectGender', uploadData.subjectGender)\n      if (uploadData.subjectGroup) formData.append('subjectGroup', uploadData.subjectGroup)\n      if (uploadData.session) formData.append('session', uploadData.session)\n      if (uploadData.task) formData.append('task', uploadData.task)\n      if (uploadData.acquisition) formData.append('acquisition', uploadData.acquisition)\n      \n      if (uploadData.tags) {\n        uploadData.tags.forEach((tag) => formData.append('tags', tag))\n      }\n\n      const response = await uploadApi.post<EegData>('/eegdata/upload', formData, {\n        onUploadProgress: (progressEvent) => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n            onProgress(progress)\n          }\n        },\n      })\n      \n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Get user's EEG data with pagination\n  getUserEegData: async (params: PaginationParams): Promise<EegData[]> => {\n    try {\n      const response = await api.get<EegData[]>('/eegdata', {\n        params: {\n          page: params.page,\n          pageSize: params.pageSize,\n        },\n      })\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Get specific EEG data by ID\n  getEegDataById: async (id: string): Promise<EegData> => {\n    try {\n      const response = await api.get<EegData>(`/eegdata/${id}`)\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Update EEG data metadata\n  updateEegData: async (id: string, updateData: Partial<EegData>): Promise<EegData> => {\n    try {\n      const response = await api.put<EegData>(`/eegdata/${id}`, updateData)\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Delete EEG data\n  deleteEegData: async (id: string): Promise<void> => {\n    try {\n      await api.delete(`/eegdata/${id}`)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Download EEG data file\n  downloadEegData: async (id: string): Promise<Blob> => {\n    try {\n      const response = await api.get(`/eegdata/${id}/download`, {\n        responseType: 'blob',\n      })\n      return response.data\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Request ADHD analysis\n  requestAdhdAnalysis: async (request: AdhdAnalysisRequest): Promise<void> => {\n    try {\n      await api.post('/eegdata/analysis/request', request)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Get ADHD analysis results\n  getAdhdAnalysis: async (eegDataId: string): Promise<AdhdAnalysis> => {\n    try {\n      const response = await api.get<AdhdAnalysis>(`/eegdata/${eegDataId}/analysis`)\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Search EEG data\n  searchEegData: async (searchParams: SearchParams): Promise<EegData[]> => {\n    try {\n      const params: any = {}\n      \n      if (searchParams.searchTerm) params.searchTerm = searchParams.searchTerm\n      if (searchParams.format) params.format = searchParams.format\n      if (searchParams.tags && searchParams.tags.length > 0) {\n        params.tags = searchParams.tags\n      }\n\n      const response = await api.get<EegData[]>('/eegdata/search', { params })\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Validate BIDS compliance\n  validateBidsCompliance: async (eegDataId: string): Promise<{ bidsCompliant: boolean }> => {\n    try {\n      const response = await api.get<{ bidsCompliant: boolean }>(`/eegdata/${eegDataId}/bids/validate`)\n      return handleApiResponse(response)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  },\n\n  // Get supported EEG formats\n  getSupportedFormats: (): { value: EegFormat; label: string; extensions: string[] }[] => {\n    return [\n      { value: EegFormat.Edf, label: 'European Data Format', extensions: ['.edf'] },\n      { value: EegFormat.Bdf, label: 'BioSemi Data Format', extensions: ['.bdf'] },\n      { value: EegFormat.Vhdr, label: 'BrainVision Format', extensions: ['.vhdr'] },\n      { value: EegFormat.Set, label: 'EEGLAB Format', extensions: ['.set'] },\n      { value: EegFormat.Fif, label: 'FIFF Format', extensions: ['.fif'] },\n      { value: EegFormat.Cnt, label: 'Neuroscan Format', extensions: ['.cnt'] },\n      { value: EegFormat.Npy, label: 'NumPy Array', extensions: ['.npy'] },\n    ]\n  },\n\n  // Helper function to download file\n  downloadFile: (blob: Blob, filename: string): void => {\n    const url = window.URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = filename\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n    window.URL.revokeObjectURL(url)\n  },\n}","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport { useEegDataStore } from '@/store/eegDataStore'\nimport { eegDataService } from '@/services/eegDataService'\nimport type { \n  EegData, \n  EegUploadRequest, \n  SearchParams\n} from '@/types'\n\nexport const useEegData = () => {\n  const queryClient = useQueryClient()\n  const {\n    eegDataList,\n    selectedEegData,\n    searchParams,\n    loadingState,\n    pagination,\n    uploadProgress,\n    addEegData,\n    updateEegData,\n    removeEegData,\n    setSelectedEegData,\n    setSearchParams,\n    setLoadingState,\n    setPagination,\n    setUploadProgress,\n    clearUploadProgress,\n  } = useEegDataStore()\n\n  // Get user's EEG data\n  const eegDataQuery = useQuery({\n    queryKey: ['eegData', 'list', pagination.currentPage, pagination.pageSize],\n    queryFn: () => eegDataService.getUserEegData({\n      page: pagination.currentPage,\n      pageSize: pagination.pageSize,\n    }),\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  })\n\n  // Get specific EEG data\n  const getEegDataQuery = (id: string) => useQuery({\n    queryKey: ['eegData', 'detail', id],\n    queryFn: () => eegDataService.getEegDataById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n\n  // Search EEG data\n  const searchQuery = useQuery({\n    queryKey: ['eegData', 'search', searchParams],\n    queryFn: () => eegDataService.searchEegData(searchParams),\n    enabled: Object.keys(searchParams).length > 0,\n    staleTime: 30 * 1000, // 30 seconds\n  })\n\n  // Upload EEG data mutation\n  const uploadMutation = useMutation({\n    mutationFn: ({ data, fileId }: { data: EegUploadRequest; fileId: string }) => \n      eegDataService.uploadEegData(data, (progress) => {\n        setUploadProgress(fileId, progress)\n      }),\n    onSuccess: (data, { fileId }) => {\n      addEegData(data)\n      clearUploadProgress(fileId)\n      queryClient.invalidateQueries({ queryKey: ['eegData', 'list'] })\n    },\n    onError: (error, { fileId }) => {\n      clearUploadProgress(fileId)\n      setLoadingState({ error: error.message })\n    },\n  })\n\n  // Update EEG data mutation\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<EegData> }) =>\n      eegDataService.updateEegData(id, data),\n    onSuccess: (data) => {\n      updateEegData(data.id, data)\n      queryClient.setQueryData(['eegData', 'detail', data.id], data)\n      queryClient.invalidateQueries({ queryKey: ['eegData', 'list'] })\n    },\n  })\n\n  // Delete EEG data mutation\n  const deleteMutation = useMutation({\n    mutationFn: eegDataService.deleteEegData,\n    onSuccess: (_, id) => {\n      removeEegData(id)\n      queryClient.removeQueries({ queryKey: ['eegData', 'detail', id] })\n      queryClient.invalidateQueries({ queryKey: ['eegData', 'list'] })\n    },\n  })\n\n  // Download EEG data mutation\n  const downloadMutation = useMutation({\n    mutationFn: ({ id }: { id: string; filename: string }) =>\n      eegDataService.downloadEegData(id),\n    onSuccess: (blob, { filename }) => {\n      eegDataService.downloadFile(blob, filename)\n    },\n  })\n\n  // Request ADHD analysis mutation\n  const adhdAnalysisMutation = useMutation({\n    mutationFn: eegDataService.requestAdhdAnalysis,\n    onSuccess: (_, { eegDataId }) => {\n      // Update the EEG data to show analysis is requested\n      updateEegData(eegDataId, {\n        adhdAnalysis: {\n          requested: true,\n          performed: false,\n          inProgress: true,\n          result: '',\n          confidence: 0,\n        }\n      })\n      queryClient.invalidateQueries({ queryKey: ['eegData', 'detail', eegDataId] })\n    },\n  })\n\n  // Get ADHD analysis query\n  const getAdhdAnalysisQuery = (eegDataId: string) => useQuery({\n    queryKey: ['eegData', 'analysis', eegDataId],\n    queryFn: () => eegDataService.getAdhdAnalysis(eegDataId),\n    enabled: !!eegDataId,\n    refetchInterval: (query) => {\n      // Poll every 5 seconds if analysis is in progress\n      return query.state.data?.inProgress ? 5000 : false\n    },\n  })\n\n  // Validate BIDS compliance query\n  const bidsValidationQuery = (eegDataId: string) => useQuery({\n    queryKey: ['eegData', 'bids', eegDataId],\n    queryFn: () => eegDataService.validateBidsCompliance(eegDataId),\n    enabled: !!eegDataId,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  })\n\n  // Helper functions\n  const uploadEegData = (data: EegUploadRequest) => {\n    const fileId = `${Date.now()}-${Math.random()}`\n    return uploadMutation.mutateAsync({ data, fileId })\n  }\n\n  const updateEegDataItem = (id: string, data: Partial<EegData>) => {\n    return updateMutation.mutateAsync({ id, data })\n  }\n\n  const deleteEegDataItem = (id: string) => {\n    return deleteMutation.mutateAsync(id)\n  }\n\n  const downloadEegDataFile = (id: string, filename: string) => {\n    return downloadMutation.mutateAsync({ id, filename })\n  }\n\n  const requestAdhdAnalysis = (eegDataId: string) => {\n    return adhdAnalysisMutation.mutateAsync({ eegDataId })\n  }\n\n  const updateSearchParams = (params: Partial<SearchParams>) => {\n    setSearchParams(params)\n  }\n\n  const updatePagination = (params: Partial<typeof pagination>) => {\n    setPagination(params)\n  }\n\n  const selectEegData = (data: EegData | null) => {\n    setSelectedEegData(data)\n  }\n\n  const getSupportedFormats = () => {\n    return eegDataService.getSupportedFormats()\n  }\n\n  return {\n    // State\n    eegDataList: eegDataQuery.data || eegDataList,\n    selectedEegData,\n    searchResults: searchQuery.data,\n    searchParams,\n    pagination,\n    uploadProgress,\n    loadingState,\n\n    // Query states\n    isLoading: eegDataQuery.isLoading,\n    isSearching: searchQuery.isLoading,\n    error: eegDataQuery.error?.message || loadingState.error,\n    searchError: searchQuery.error?.message,\n\n    // Mutation states\n    isUploading: uploadMutation.isPending,\n    isUpdating: updateMutation.isPending,\n    isDeleting: deleteMutation.isPending,\n    isDownloading: downloadMutation.isPending,\n    isRequestingAnalysis: adhdAnalysisMutation.isPending,\n\n    // Actions\n    uploadEegData,\n    updateEegDataItem,\n    deleteEegDataItem,\n    downloadEegDataFile,\n    requestAdhdAnalysis,\n    updateSearchParams,\n    updatePagination,\n    selectEegData,\n    getSupportedFormats,\n\n    // Query functions for specific data\n    getEegDataQuery,\n    getAdhdAnalysisQuery,\n    bidsValidationQuery,\n\n    // Error states\n    uploadError: uploadMutation.error?.message,\n    updateError: updateMutation.error?.message,\n    deleteError: deleteMutation.error?.message,\n    downloadError: downloadMutation.error?.message,\n    analysisError: adhdAnalysisMutation.error?.message,\n\n    // Success states\n    uploadSuccess: uploadMutation.isSuccess,\n    updateSuccess: updateMutation.isSuccess,\n    deleteSuccess: deleteMutation.isSuccess,\n    analysisSuccess: adhdAnalysisMutation.isSuccess,\n  }\n}"],"names":["initialState","useEegDataStore","create","set","get","data","eegDataList","id","updatedList","item","selectedEegData","filteredList","params","searchParams","state","loadingState","pagination","currentPagination","fileId","progress","uploadProgress","removed","rest","EegFormat","eegDataService","uploadData","onProgress","uploadApi","createFileUploadApi","formData","tag","response","progressEvent","handleApiResponse","error","handleApiError","api","updateData","request","eegDataId","blob","filename","url","link","useEegData","queryClient","useQueryClient","addEegData","updateEegData","removeEegData","setSelectedEegData","setSearchParams","setLoadingState","setPagination","setUploadProgress","clearUploadProgress","eegDataQuery","useQuery","getEegDataQuery","searchQuery","uploadMutation","useMutation","updateMutation","deleteMutation","_","downloadMutation","adhdAnalysisMutation","getAdhdAnalysisQuery","query","_a","bidsValidationQuery","uploadEegData","updateEegDataItem","deleteEegDataItem","downloadEegDataFile","requestAdhdAnalysis","updateSearchParams","updatePagination","selectEegData","getSupportedFormats","_b","_c","_d","_e","_f","_g"],"mappings":"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"}