{"version":3,"file":"Register-B92eBDGU.js","sources":["../../src/pages/Register.tsx"],"sourcesContent":["import { useState } from 'react'\nimport {\n  Box,\n  VStack,\n  Heading,\n  Text,\n  Input,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Alert,\n  AlertIcon,\n  Link,\n  useToast,\n  Container,\n  Divider\n} from '@chakra-ui/react'\nimport { Link as RouterLink, useNavigate } from 'react-router-dom'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useAuth } from '@/hooks/useAuth'\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, 'First name must be at least 2 characters'),\n  lastName: z.string().min(2, 'Last name must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirmPassword: z.string().min(8, 'Password confirmation is required')\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n})\n\ntype RegisterFormData = z.infer<typeof registerSchema>\n\nconst Register: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { register: registerUser } = useAuth()\n  const navigate = useNavigate()\n  const toast = useToast()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema)\n  })\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      await registerUser({\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        password: data.password\n      })\n\n      toast({\n        title: 'Registration successful',\n        description: 'Welcome to EEGility! You are now logged in.',\n        status: 'success',\n        duration: 5000,\n        isClosable: true\n      })\n\n      navigate('/dashboard')\n    } catch (err: any) {\n      setError(err.message || 'Registration failed. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Container maxW=\"md\" py={12}>\n      <VStack spacing={8}>\n        <Box textAlign=\"center\">\n          <Heading size=\"xl\" mb={2}>\n            Join EEGility\n          </Heading>\n          <Text color=\"gray.600\">\n            Create your account to start analyzing EEG data\n          </Text>\n        </Box>\n\n        <Box w=\"full\" bg=\"white\" p={8} borderRadius=\"lg\" boxShadow=\"md\">\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <VStack spacing={4}>\n              {error && (\n                <Alert status=\"error\">\n                  <AlertIcon />\n                  {error}\n                </Alert>\n              )}\n\n              <FormControl isInvalid={!!errors.firstName}>\n                <FormLabel>First Name</FormLabel>\n                <Input\n                  {...register('firstName')}\n                  placeholder=\"Enter your first name\"\n                />\n                <FormErrorMessage>\n                  {errors.firstName?.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.lastName}>\n                <FormLabel>Last Name</FormLabel>\n                <Input\n                  {...register('lastName')}\n                  placeholder=\"Enter your last name\"\n                />\n                <FormErrorMessage>\n                  {errors.lastName?.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.email}>\n                <FormLabel>Email</FormLabel>\n                <Input\n                  {...register('email')}\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                />\n                <FormErrorMessage>\n                  {errors.email?.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.password}>\n                <FormLabel>Password</FormLabel>\n                <Input\n                  {...register('password')}\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                />\n                <FormErrorMessage>\n                  {errors.password?.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl isInvalid={!!errors.confirmPassword}>\n                <FormLabel>Confirm Password</FormLabel>\n                <Input\n                  {...register('confirmPassword')}\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                />\n                <FormErrorMessage>\n                  {errors.confirmPassword?.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <Button\n                type=\"submit\"\n                colorScheme=\"brand\"\n                size=\"lg\"\n                width=\"full\"\n                isLoading={isLoading}\n                loadingText=\"Creating account...\"\n              >\n                Create Account\n              </Button>\n            </VStack>\n          </form>\n\n          <Divider my={6} />\n\n          <Text textAlign=\"center\" fontSize=\"sm\" color=\"gray.600\">\n            Already have an account?{' '}\n            <Link as={RouterLink} to=\"/login\" color=\"brand.500\" fontWeight=\"medium\">\n              Sign in here\n            </Link>\n          </Text>\n        </Box>\n      </VStack>\n    </Container>\n  )\n}\n\nexport default Register"],"names":["registerSchema","z.object","z.string","data","Register","isLoading","setIsLoading","useState","error","setError","registerUser","useAuth","navigate","useNavigate","toast","useToast","register","handleSubmit","errors","useForm","zodResolver","onSubmit","err","jsx","Container","jsxs","VStack","Box","Heading","Text","Alert","AlertIcon","FormControl","FormLabel","Input","FormErrorMessage","_a","_b","_c","_d","_e","Button","Divider","Link","RouterLink"],"mappings":"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"}